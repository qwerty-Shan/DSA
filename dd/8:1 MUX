module mux_8_1 (i, s, y);
input [7:0] i;
input [2:0] s;
output y;

reg y;

always @(i, s) 
begin
    case (s)
        3'b000: y = i[0];
        3'b001: y = i[1];
        3'b010: y = i[2];
        3'b011: y = i[3];
        3'b100: y = i[4];
        3'b101: y = i[5];
        3'b110: y = i[6];
        3'b111: y = i[7];
    endcase
end

endmodule


//structural code 
module mux81 (a, b, c, d, e, f, g, h, s1, s2, s3, y);

input a, b, c, d, e, f, g, h;
Input s1, s2, s3;

output y;

wire m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11;

assign m1 = ~s1;
assign m2 = ~s2;
assign m3 = ~s3;

assign m4 = m1 & m2 & m3 & a;
assign m5 = m1 & m2 & s3 & b;
assign m6 = m1 & s2 & m3 & c;
assign m7 = m1 & s2 & s3 & d;
assign m8 = s1 & m2 & m3 & e;
assign m9 = s1 & m2 & s3 & f;
assign m10 = s1 & s2 & m3 & g;
assign m11 = s1 & s2 & s3 & h;

assign y = m4 | m5 | m6 | m7 | m8 | m9 | m10 | m11;

endmodule
