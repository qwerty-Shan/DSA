module mux_4_1 (i, s, y);

input [3:0] i;
input [1:0] s;

output y;

reg y;

always @(i, s) 
begin
    case (s)
        2'b00: y = i[0];
        2'b01: y = i[1];
        2'b10: y = i[2];
        2'b11: y = i[3];
    endcase
end

endmodule
//data flow code
module mux41 (a, b, c, d, s1, s2, y);

input a, b, c, d, s1, s2;

output y;

wire m1, m2, m3, m4, m5, m6;

assign m1 = ~s1;
assign m2 = ~s2;
assign m3 = m1 & m2 & a;
assign m4 = m1 & s2 & b;
assign m5 = s1 & m2 & c;
assign m6 = s1 & s2 & d;
assign y = m3 | m4 | m5 | m6;

endmodule


____

module mux41_str (a, b, c, d, s1, s2, y);

input a, b, c, d, s1, s2;

output y;

wire m1, m2, m3, m4, m5, m6;

not n1(m1, s1);
not n2(m2, s2);

and a1(m3, m1, m2, a);
and a2(m4, s1, m2, b);
and a3(m5, m1, s2, c);
and a4(m6, s1, s2, d);

or o1(y, m3, m4, m5, m6);

endmodule
